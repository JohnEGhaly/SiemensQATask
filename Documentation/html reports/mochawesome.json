{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 7,
    "pending": 0,
    "failures": 3,
    "start": "2024-04-18T22:47:51.036Z",
    "end": "2024-04-18T22:47:51.128Z",
    "duration": 92,
    "testsRegistered": 10,
    "passPercent": 70,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "87cb60ca-0ee5-4070-81c2-85a3e094c435",
      "title": "",
      "fullFile": "/Users/apple/Desktop/john-siemens/APITesting/api.js",
      "file": "/api.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
          "title": "api testing",
          "fullFile": "/Users/apple/Desktop/john-siemens/APITesting/api.js",
          "file": "/api.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "testing create new user",
              "fullTitle": "api testing testing create new user",
              "timedOut": false,
              "duration": 45,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n.post('/api/v1/users')\n.send(({\"name\": \"user\", \"email\": \"user@gmail.com\", \"password\": \"user123\"}))\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('message');\nexpect(response.body.message).to.equal('User registered with success');\nexpect(response.body).to.have.property('token');",
              "err": {
                "message": "AssertionError: expected { Object (message) } to have property 'token'",
                "estack": "AssertionError: expected { Object (message) } to have property 'token'\n    at Context.<anonymous> (api.js:15:39)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "45a909bd-e3e8-4eb9-841a-11d0bd041a86",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing authentication on the created user",
              "fullTitle": "api testing testing authentication on the created user",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n.post('/api/v1/auth')\n.send(({\"email\": \"user@gmail.com\", \"password\": \"user123\"}))\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('token');\nauthToken=response.body.token",
              "err": {},
              "uuid": "c405011b-bd47-4eb5-a9d9-50dd085d3180",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing authentication on user with invalid input",
              "fullTitle": "api testing testing authentication on user with invalid input",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n.post('/api/v1/auth')\n.send(({\"invalid_input\": \"xyx\"}))\nexpect(response.status).not.equal(200);",
              "err": {},
              "uuid": "1f90588e-d1ec-4ae3-a9bc-03b19f96bc97",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing get user by token",
              "fullTitle": "api testing testing get user by token",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n.get('/api/v1/users')\n.set('Authorization', authToken)\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('id');\nexpect(response.body).to.have.property('name');\nexpect(response.body.name).to.equal('user');\nexpect(response.body).to.have.property('email');\nexpect(response.body.email).to.equal('user@gmail.com');\nexpect(response.body).to.have.property('password');\nexpect(response.body.password).to.equal('user123');\nexpect(response.body).to.have.property('imageUrl');\nexpect(response.body.imageUrl).to.equal('https://almsaeedstudio.com/themes/AdminLTE/dist/img/user2-160x160.jpg');",
              "err": {},
              "uuid": "10e5e0fb-d2c0-4923-ab42-b6c4a5f9b660",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing get user by invalid token",
              "fullTitle": "api testing testing get user by invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n.get('/api/v1/users')\n.set('Authorization', \"invalidToken\")\nexpect(response.status).not.equal(200);",
              "err": {},
              "uuid": "cad3586e-2965-439e-a118-44f8badcfa09",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing patch user by token",
              "fullTitle": "api testing testing patch user by token",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n.patch('/api/v1/users')\n.set('Authorization', authToken)\n.send(({\"name\": \"newName\",\"email\": \"new_email@gmail.com\",\"password\": \"newpassword123\"}))\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('message');\nexpect(response.body.message).to.equal('User updated with success');",
              "err": {
                "message": "AssertionError: expected 'User updated with success!' to equal 'User updated with success'",
                "estack": "AssertionError: expected 'User updated with success!' to equal 'User updated with success'\n    at Context.<anonymous> (api.js:59:42)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- User updated with success!\n+ User updated with success\n"
              },
              "uuid": "2bcbc526-b1d5-4fd4-a68e-1d93e3f7a324",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing patch user by invalid token",
              "fullTitle": "api testing testing patch user by invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n.patch('/api/v1/users')\n.set('Authorization', \"invalidToken\")\n.send(({\"name\": \"newName\",\"email\": \"new_email@gmail.com\",\"password\": \"newpassword123\"}))\nexpect(response.status).not.equal(200);",
              "err": {},
              "uuid": "f2e06431-9466-4b6d-befb-a094f86dd4d4",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing delete user by token",
              "fullTitle": "api testing testing delete user by token",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n.delete('/api/v1/users')\n.set('Authorization', authToken)\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('message');\nexpect(response.body.message).to.equal('User deleted with success');",
              "err": {
                "message": "AssertionError: expected 403 to equal 200",
                "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (api.js:72:36)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 403\n+ 200\n"
              },
              "uuid": "517e6a3d-345f-4363-9ccc-862c2b894d17",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing delete all users",
              "fullTitle": "api testing testing delete all users",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createNewUserResponse = await request(app)\n.post('/api/v1/users')\n.send(({\"name\": \"user2\", \"email\": \"user2@gmail.com\", \"password\": \"user123\"}))\nexpect(createNewUserResponse.status).to.equal(200);\nconst response = await request(app)\n.delete('/api/v1/all-users')\n.send(({key_admin: \"keyadmin123\"}))\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('message');\nexpect(response.body.message).to.equal('Users deleted with success');",
              "err": {},
              "uuid": "27b1c27b-6404-4f7b-9cf7-85dda9c40b10",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing delete all users with invalid key",
              "fullTitle": "api testing testing delete all users with invalid key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n  .delete('/api/v1/all-users')\n  .send(({key_admin: \"keyadmin12345\"}))\n  expect(response.status).not.equal(200);",
              "err": {},
              "uuid": "3011faec-b18d-4011-94ea-5bc4dc2899fa",
              "parentUUID": "1486f5ba-1cc0-43d0-a317-1fc59ee8a4da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c405011b-bd47-4eb5-a9d9-50dd085d3180",
            "1f90588e-d1ec-4ae3-a9bc-03b19f96bc97",
            "10e5e0fb-d2c0-4923-ab42-b6c4a5f9b660",
            "cad3586e-2965-439e-a118-44f8badcfa09",
            "f2e06431-9466-4b6d-befb-a094f86dd4d4",
            "27b1c27b-6404-4f7b-9cf7-85dda9c40b10",
            "3011faec-b18d-4011-94ea-5bc4dc2899fa"
          ],
          "failures": [
            "45a909bd-e3e8-4eb9-841a-11d0bd041a86",
            "2bcbc526-b1d5-4fd4-a68e-1d93e3f7a324",
            "517e6a3d-345f-4363-9ccc-862c2b894d17"
          ],
          "pending": [],
          "skipped": [],
          "duration": 81,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}